library(shiny)
library(DT)
library(plotly)
library(shinythemes)
library(magrittr)
library(caret)

ui <- fluidPage(
  theme = shinytheme("cosmo"),
  
  navbarPage("Uploaded Data Analysis"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput("file1", "Choose CSV File",
                multiple = TRUE,
                accept = c("text/csv",
                           "text/comma-separated-values,text/plain",
                           ".csv")),
      
      
      tags$hr(),
      
      checkboxInput("header", "Header", TRUE),
      
      radioButtons("sep", "Separator",
                   choices = c(Comma = ",",
                               Semicolon = ";",
                               Tab = "\t"),
                   selected = ","),
      
      
      radioButtons("quote", "Quote",
                   choices = c(None = "",
                               "Double Quote" = '"',
                               "Single Quote" = "'"),
                   selected = '"'),
      
      tags$hr(),
      
      
      radioButtons("disp", "Display",
                   choices = c(Head = "head",
                               All = "all"),
                   selected = "head")
      
    ),
    
    mainPanel(
      tabsetPanel(
        tabPanel("Data Table", icon = icon("table"), dataTableOutput("contents")),
        tabPanel("Select Variable", icon = icon("list-alt"), selectInput(
          inputId = "xcol",
          label = "",
          choices = names(data())
        ),
        selectInput(
          inputId = "ycol",
          label = "",
          choices = names(data())
        )),
        tabPanel("Plot", icon = icon("bar-chart-o") ,plotlyOutput("plot")),
        tabPanel("Variable Operations", icon = icon("list-alt"), 
                 tabname = "degisken",
                 br(),
                 uiOutput('bagimli'),
                 br(),
                 uiOutput('bagimsiz')
        ),
        tabPanel("Regression", icon = icon("atom"),
                 tabname = "lr",
                 h3("Linear Regression"),
                 p("- Residuals : Artik olarak bilinen degerlerin tanimlayici istatistiklerini verir"),
                 p("- Coefficients : Estimate, modeldeki degiskenlerin Beta katsayilaridir, bu katsayilara ait tanimlayici istatistikler ve anlamlilik icin p degerleri vardir."),
                 p("- R-squared bagimsiz degiskenlerin, bagimli degiskendeki degisimi/varyansi/karakteristigi yuzde kacini acikladigini anlatan bir istatistiktir."),
                 p("- F-statistic modelin anlamliligi icin elde edilen p degeridir, p-value ise bu degere karsilik gelen degerdir."),
                 
                 verbatimTextOutput("model")),
        
        tabPanel("Sonuç" , icon = icon("list-alt"),
                 tabname = "sonuc",
                 selectInput("select", h3("Kaplama Türünü Seçiniz:"), 
                             choices = list("PN Somun" = 1, "Çinko TT 15" = 2,
                                            "Çinko Nikel TT 12" = 3, "Çinko Fosfat" = 4,
                                            "Delta KL100 VH301" = 5, "Geomet500B PlusM" = 6), 
                             selected = 1), 
        numericInput("sıkmatork", 
                     h3("Sıkma Torkunu Belirleyiniz:"), 
                     value = 1),
        h3("Sökme Torku:"),
        verbatimTextOutput("tork")),
        
        ) 
        
        
        ) 
        
      )
      
    )

 


server <- function(input, output , session) {
  
  # output$contents <- renderTable({
  data <- reactive({
    
    req(input$file1)
    
    df <- read.csv(input$file1$datapath,
                   header = input$header,
                   sep = input$sep,
                   quote = input$quote)
    
    updateSelectInput(inputId = 'xcol', label = 'Select x variable:',
                      choices = names(df), selected = names(df))
    updateSelectInput(inputId = 'ycol', label = 'Select y variable:',
                      choices = names(df), selected = names(df))
    
    
    return(df)
    
    
  })
  
  output$contents <- renderDataTable({
    
    DT::datatable(data.frame(data()), extensions = "ColReorder",
                  options = list(pageLength=5,
                                 colReorder = TRUE,
                                 scrollX = TRUE))
  })
  xcoll <- reactive({
    detc <- select(data(), input$xcol)
    return(detc)})
  ycoll <- reactive({
    detc <- select(data(), input$ycol)
    return(detc) })
  output$plot <- renderPlotly({
    
    plot_ly(data(),
            x = ~get(input$xcol),
            y = ~get(input$ycol),
            type = "box")
  })
  
  rv <- reactiveValues()
  
  observe({rv$Train <- data()})
  output$bagimli <- renderUI({
    
    selectInput('bagimli', h4('Bagimli Degiskeni Seciniz'), 
                choices = names(rv$Train[]), 
                selected = names(rv$Train[]))
  })
  
  output$bagimsiz <- renderUI({
    checkboxGroupInput('bagimsiz', h4('Bagimsiz Degiskenleri Seciniz'), 
                       choices = names(rv$Train[]),
                       selected = names(rv$Train[]) ,inline = TRUE)
  })
  
  output$model <- renderPrint({
    input$bagimli
    input$bagimsiz
    veri <- data()
    
    form <- as.formula(paste(names(data())[names(data()) %in% input$bagimli], "~",
                             paste(names(data())[names(data()) %in% input$bagimsiz], collapse="+")))
    lm(form, data=veri)
    
    # glm() fonksiyonu ile modelimizi kuruyoruz ve bir degiskene kaydediyoruz  
    model <- lm(as.formula(form),data=veri)
    print(summary(model))
    
    
  })
  
  output$sonuc <-renderPrint({
    input$kaplama
    input$sıkmatork
   
  })
  
  
  #x<-data()[c(input$xcol, input$ycol)]
  #plot(x,
  #     xlab = "X",
  #     ylab = "Y",
  #     col = "blue",
  #     title("")
  #)
  
  
  #x<-data()[c(input$xcol,input$ycol)]
  #ggplot(x , aes(y=data()[,2],x=data()[,1]))+
  #  geom_point()+
  #  geom_smooth(method = "loess")+
  #  xlab("X")+
  #  ylab("Y")
  #geom_smooth(method = "lm")+
  
}




shinyApp(ui, server)
